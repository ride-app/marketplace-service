// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dragonfish/go/v2/pkg/logger"
	"github.com/ride-app/marketplace-service/config"
	"github.com/ride-app/marketplace-service/internal/api-handlers"
	"github.com/ride-app/marketplace-service/internal/repositories/driver"
	"github.com/ride-app/marketplace-service/internal/repositories/location"
	"github.com/ride-app/marketplace-service/internal/repositories/status"
	"github.com/ride-app/marketplace-service/internal/repositories/trip"
	"github.com/ride-app/marketplace-service/internal/repositories/wallet"
	"github.com/ride-app/marketplace-service/third-party"
)

// Injectors from wire.go:

func InitializeService(logger2 logger.Logger, config2 *config.Config) (*apihandlers.MarketplaceServiceServer, error) {
	app, err := thirdparty.NewFirebaseApp(logger2, config2)
	if err != nil {
		return nil, err
	}
	firebaseImpl, err := statusrepository.NewFirebaseStatusRepository(logger2, app)
	if err != nil {
		return nil, err
	}
	locationrepositoryFirebaseImpl, err := locationrepository.NewFirebaseLocationRepository(logger2, app)
	if err != nil {
		return nil, err
	}
	impl, err := walletrepository.New(logger2, config2)
	if err != nil {
		return nil, err
	}
	driverrepositoryImpl, err := driverrepository.New(logger2, config2)
	if err != nil {
		return nil, err
	}
	triprepositoryFirebaseImpl, err := triprepository.NewFirebaseTripRepository(logger2, app)
	if err != nil {
		return nil, err
	}
	marketplaceServiceServer := apihandlers.New(firebaseImpl, locationrepositoryFirebaseImpl, impl, driverrepositoryImpl, triprepositoryFirebaseImpl, logger2)
	return marketplaceServiceServer, nil
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ride-app/marketplace-service/repositories/driver (interfaces: DriverRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	driverv1alpha1 "buf.build/gen/go/ride/driver/protocolbuffers/go/ride/driver/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockDriverRepository is a mock of DriverRepository interface.
type MockDriverRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDriverRepositoryMockRecorder
}

// MockDriverRepositoryMockRecorder is the mock recorder for MockDriverRepository.
type MockDriverRepositoryMockRecorder struct {
	mock *MockDriverRepository
}

// NewMockDriverRepository creates a new mock instance.
func NewMockDriverRepository(ctrl *gomock.Controller) *MockDriverRepository {
	mock := &MockDriverRepository{ctrl: ctrl}
	mock.recorder = &MockDriverRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverRepository) EXPECT() *MockDriverRepositoryMockRecorder {
	return m.recorder
}

// GetDriver mocks base method.
func (m *MockDriverRepository) GetDriver(arg0 context.Context, arg1, arg2 string) (*driverv1alpha1.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriver", arg0, arg1, arg2)
	ret0, _ := ret[0].(*driverv1alpha1.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriver indicates an expected call of GetDriver.
func (mr *MockDriverRepositoryMockRecorder) GetDriver(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriver", reflect.TypeOf((*MockDriverRepository)(nil).GetDriver), arg0, arg1, arg2)
}

// GetVehicle mocks base method.
func (m *MockDriverRepository) GetVehicle(arg0 context.Context, arg1, arg2 string) (*driverv1alpha1.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicle", arg0, arg1, arg2)
	ret0, _ := ret[0].(*driverv1alpha1.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicle indicates an expected call of GetVehicle.
func (mr *MockDriverRepositoryMockRecorder) GetVehicle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicle", reflect.TypeOf((*MockDriverRepository)(nil).GetVehicle), arg0, arg1, arg2)
}

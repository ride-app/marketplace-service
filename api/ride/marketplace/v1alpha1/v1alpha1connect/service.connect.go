// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ride/marketplace/v1alpha1/service.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1alpha1 "github.com/ride-app/marketplace-service/api/ride/marketplace/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MarketplaceServiceName is the fully-qualified name of the MarketplaceService service.
	MarketplaceServiceName = "ride.marketplace.v1alpha1.MarketplaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MarketplaceServiceGoOnlineProcedure is the fully-qualified name of the MarketplaceService's
	// GoOnline RPC.
	MarketplaceServiceGoOnlineProcedure = "/ride.marketplace.v1alpha1.MarketplaceService/GoOnline"
	// MarketplaceServiceGoOfflineProcedure is the fully-qualified name of the MarketplaceService's
	// GoOffline RPC.
	MarketplaceServiceGoOfflineProcedure = "/ride.marketplace.v1alpha1.MarketplaceService/GoOffline"
	// MarketplaceServiceGetStatusProcedure is the fully-qualified name of the MarketplaceService's
	// GetStatus RPC.
	MarketplaceServiceGetStatusProcedure = "/ride.marketplace.v1alpha1.MarketplaceService/GetStatus"
	// MarketplaceServiceWatchStatusProcedure is the fully-qualified name of the MarketplaceService's
	// WatchStatus RPC.
	MarketplaceServiceWatchStatusProcedure = "/ride.marketplace.v1alpha1.MarketplaceService/WatchStatus"
	// MarketplaceServiceGetLocationProcedure is the fully-qualified name of the MarketplaceService's
	// GetLocation RPC.
	MarketplaceServiceGetLocationProcedure = "/ride.marketplace.v1alpha1.MarketplaceService/GetLocation"
	// MarketplaceServiceWatchLocationProcedure is the fully-qualified name of the MarketplaceService's
	// WatchLocation RPC.
	MarketplaceServiceWatchLocationProcedure = "/ride.marketplace.v1alpha1.MarketplaceService/WatchLocation"
	// MarketplaceServiceUpdateLocationProcedure is the fully-qualified name of the MarketplaceService's
	// UpdateLocation RPC.
	MarketplaceServiceUpdateLocationProcedure = "/ride.marketplace.v1alpha1.MarketplaceService/UpdateLocation"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	marketplaceServiceServiceDescriptor              = v1alpha1.File_ride_marketplace_v1alpha1_service_proto.Services().ByName("MarketplaceService")
	marketplaceServiceGoOnlineMethodDescriptor       = marketplaceServiceServiceDescriptor.Methods().ByName("GoOnline")
	marketplaceServiceGoOfflineMethodDescriptor      = marketplaceServiceServiceDescriptor.Methods().ByName("GoOffline")
	marketplaceServiceGetStatusMethodDescriptor      = marketplaceServiceServiceDescriptor.Methods().ByName("GetStatus")
	marketplaceServiceWatchStatusMethodDescriptor    = marketplaceServiceServiceDescriptor.Methods().ByName("WatchStatus")
	marketplaceServiceGetLocationMethodDescriptor    = marketplaceServiceServiceDescriptor.Methods().ByName("GetLocation")
	marketplaceServiceWatchLocationMethodDescriptor  = marketplaceServiceServiceDescriptor.Methods().ByName("WatchLocation")
	marketplaceServiceUpdateLocationMethodDescriptor = marketplaceServiceServiceDescriptor.Methods().ByName("UpdateLocation")
)

// MarketplaceServiceClient is a client for the ride.marketplace.v1alpha1.MarketplaceService
// service.
type MarketplaceServiceClient interface {
	GoOnline(context.Context, *connect.Request[v1alpha1.GoOnlineRequest]) (*connect.Response[v1alpha1.GoOnlineResponse], error)
	GoOffline(context.Context, *connect.Request[v1alpha1.GoOfflineRequest]) (*connect.Response[v1alpha1.GoOfflineResponse], error)
	GetStatus(context.Context, *connect.Request[v1alpha1.GetStatusRequest]) (*connect.Response[v1alpha1.GetStatusResponse], error)
	WatchStatus(context.Context, *connect.Request[v1alpha1.WatchStatusRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchStatusResponse], error)
	GetLocation(context.Context, *connect.Request[v1alpha1.GetLocationRequest]) (*connect.Response[v1alpha1.GetLocationResponse], error)
	WatchLocation(context.Context, *connect.Request[v1alpha1.WatchLocationRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchLocationResponse], error)
	UpdateLocation(context.Context, *connect.Request[v1alpha1.UpdateLocationRequest]) (*connect.Response[v1alpha1.UpdateLocationResponse], error)
}

// NewMarketplaceServiceClient constructs a client for the
// ride.marketplace.v1alpha1.MarketplaceService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMarketplaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MarketplaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &marketplaceServiceClient{
		goOnline: connect.NewClient[v1alpha1.GoOnlineRequest, v1alpha1.GoOnlineResponse](
			httpClient,
			baseURL+MarketplaceServiceGoOnlineProcedure,
			connect.WithSchema(marketplaceServiceGoOnlineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		goOffline: connect.NewClient[v1alpha1.GoOfflineRequest, v1alpha1.GoOfflineResponse](
			httpClient,
			baseURL+MarketplaceServiceGoOfflineProcedure,
			connect.WithSchema(marketplaceServiceGoOfflineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[v1alpha1.GetStatusRequest, v1alpha1.GetStatusResponse](
			httpClient,
			baseURL+MarketplaceServiceGetStatusProcedure,
			connect.WithSchema(marketplaceServiceGetStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watchStatus: connect.NewClient[v1alpha1.WatchStatusRequest, v1alpha1.WatchStatusResponse](
			httpClient,
			baseURL+MarketplaceServiceWatchStatusProcedure,
			connect.WithSchema(marketplaceServiceWatchStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLocation: connect.NewClient[v1alpha1.GetLocationRequest, v1alpha1.GetLocationResponse](
			httpClient,
			baseURL+MarketplaceServiceGetLocationProcedure,
			connect.WithSchema(marketplaceServiceGetLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watchLocation: connect.NewClient[v1alpha1.WatchLocationRequest, v1alpha1.WatchLocationResponse](
			httpClient,
			baseURL+MarketplaceServiceWatchLocationProcedure,
			connect.WithSchema(marketplaceServiceWatchLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateLocation: connect.NewClient[v1alpha1.UpdateLocationRequest, v1alpha1.UpdateLocationResponse](
			httpClient,
			baseURL+MarketplaceServiceUpdateLocationProcedure,
			connect.WithSchema(marketplaceServiceUpdateLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// marketplaceServiceClient implements MarketplaceServiceClient.
type marketplaceServiceClient struct {
	goOnline       *connect.Client[v1alpha1.GoOnlineRequest, v1alpha1.GoOnlineResponse]
	goOffline      *connect.Client[v1alpha1.GoOfflineRequest, v1alpha1.GoOfflineResponse]
	getStatus      *connect.Client[v1alpha1.GetStatusRequest, v1alpha1.GetStatusResponse]
	watchStatus    *connect.Client[v1alpha1.WatchStatusRequest, v1alpha1.WatchStatusResponse]
	getLocation    *connect.Client[v1alpha1.GetLocationRequest, v1alpha1.GetLocationResponse]
	watchLocation  *connect.Client[v1alpha1.WatchLocationRequest, v1alpha1.WatchLocationResponse]
	updateLocation *connect.Client[v1alpha1.UpdateLocationRequest, v1alpha1.UpdateLocationResponse]
}

// GoOnline calls ride.marketplace.v1alpha1.MarketplaceService.GoOnline.
func (c *marketplaceServiceClient) GoOnline(ctx context.Context, req *connect.Request[v1alpha1.GoOnlineRequest]) (*connect.Response[v1alpha1.GoOnlineResponse], error) {
	return c.goOnline.CallUnary(ctx, req)
}

// GoOffline calls ride.marketplace.v1alpha1.MarketplaceService.GoOffline.
func (c *marketplaceServiceClient) GoOffline(ctx context.Context, req *connect.Request[v1alpha1.GoOfflineRequest]) (*connect.Response[v1alpha1.GoOfflineResponse], error) {
	return c.goOffline.CallUnary(ctx, req)
}

// GetStatus calls ride.marketplace.v1alpha1.MarketplaceService.GetStatus.
func (c *marketplaceServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1alpha1.GetStatusRequest]) (*connect.Response[v1alpha1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// WatchStatus calls ride.marketplace.v1alpha1.MarketplaceService.WatchStatus.
func (c *marketplaceServiceClient) WatchStatus(ctx context.Context, req *connect.Request[v1alpha1.WatchStatusRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchStatusResponse], error) {
	return c.watchStatus.CallServerStream(ctx, req)
}

// GetLocation calls ride.marketplace.v1alpha1.MarketplaceService.GetLocation.
func (c *marketplaceServiceClient) GetLocation(ctx context.Context, req *connect.Request[v1alpha1.GetLocationRequest]) (*connect.Response[v1alpha1.GetLocationResponse], error) {
	return c.getLocation.CallUnary(ctx, req)
}

// WatchLocation calls ride.marketplace.v1alpha1.MarketplaceService.WatchLocation.
func (c *marketplaceServiceClient) WatchLocation(ctx context.Context, req *connect.Request[v1alpha1.WatchLocationRequest]) (*connect.ServerStreamForClient[v1alpha1.WatchLocationResponse], error) {
	return c.watchLocation.CallServerStream(ctx, req)
}

// UpdateLocation calls ride.marketplace.v1alpha1.MarketplaceService.UpdateLocation.
func (c *marketplaceServiceClient) UpdateLocation(ctx context.Context, req *connect.Request[v1alpha1.UpdateLocationRequest]) (*connect.Response[v1alpha1.UpdateLocationResponse], error) {
	return c.updateLocation.CallUnary(ctx, req)
}

// MarketplaceServiceHandler is an implementation of the
// ride.marketplace.v1alpha1.MarketplaceService service.
type MarketplaceServiceHandler interface {
	GoOnline(context.Context, *connect.Request[v1alpha1.GoOnlineRequest]) (*connect.Response[v1alpha1.GoOnlineResponse], error)
	GoOffline(context.Context, *connect.Request[v1alpha1.GoOfflineRequest]) (*connect.Response[v1alpha1.GoOfflineResponse], error)
	GetStatus(context.Context, *connect.Request[v1alpha1.GetStatusRequest]) (*connect.Response[v1alpha1.GetStatusResponse], error)
	WatchStatus(context.Context, *connect.Request[v1alpha1.WatchStatusRequest], *connect.ServerStream[v1alpha1.WatchStatusResponse]) error
	GetLocation(context.Context, *connect.Request[v1alpha1.GetLocationRequest]) (*connect.Response[v1alpha1.GetLocationResponse], error)
	WatchLocation(context.Context, *connect.Request[v1alpha1.WatchLocationRequest], *connect.ServerStream[v1alpha1.WatchLocationResponse]) error
	UpdateLocation(context.Context, *connect.Request[v1alpha1.UpdateLocationRequest]) (*connect.Response[v1alpha1.UpdateLocationResponse], error)
}

// NewMarketplaceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMarketplaceServiceHandler(svc MarketplaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	marketplaceServiceGoOnlineHandler := connect.NewUnaryHandler(
		MarketplaceServiceGoOnlineProcedure,
		svc.GoOnline,
		connect.WithSchema(marketplaceServiceGoOnlineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	marketplaceServiceGoOfflineHandler := connect.NewUnaryHandler(
		MarketplaceServiceGoOfflineProcedure,
		svc.GoOffline,
		connect.WithSchema(marketplaceServiceGoOfflineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	marketplaceServiceGetStatusHandler := connect.NewUnaryHandler(
		MarketplaceServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(marketplaceServiceGetStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	marketplaceServiceWatchStatusHandler := connect.NewServerStreamHandler(
		MarketplaceServiceWatchStatusProcedure,
		svc.WatchStatus,
		connect.WithSchema(marketplaceServiceWatchStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	marketplaceServiceGetLocationHandler := connect.NewUnaryHandler(
		MarketplaceServiceGetLocationProcedure,
		svc.GetLocation,
		connect.WithSchema(marketplaceServiceGetLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	marketplaceServiceWatchLocationHandler := connect.NewServerStreamHandler(
		MarketplaceServiceWatchLocationProcedure,
		svc.WatchLocation,
		connect.WithSchema(marketplaceServiceWatchLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	marketplaceServiceUpdateLocationHandler := connect.NewUnaryHandler(
		MarketplaceServiceUpdateLocationProcedure,
		svc.UpdateLocation,
		connect.WithSchema(marketplaceServiceUpdateLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ride.marketplace.v1alpha1.MarketplaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MarketplaceServiceGoOnlineProcedure:
			marketplaceServiceGoOnlineHandler.ServeHTTP(w, r)
		case MarketplaceServiceGoOfflineProcedure:
			marketplaceServiceGoOfflineHandler.ServeHTTP(w, r)
		case MarketplaceServiceGetStatusProcedure:
			marketplaceServiceGetStatusHandler.ServeHTTP(w, r)
		case MarketplaceServiceWatchStatusProcedure:
			marketplaceServiceWatchStatusHandler.ServeHTTP(w, r)
		case MarketplaceServiceGetLocationProcedure:
			marketplaceServiceGetLocationHandler.ServeHTTP(w, r)
		case MarketplaceServiceWatchLocationProcedure:
			marketplaceServiceWatchLocationHandler.ServeHTTP(w, r)
		case MarketplaceServiceUpdateLocationProcedure:
			marketplaceServiceUpdateLocationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMarketplaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMarketplaceServiceHandler struct{}

func (UnimplementedMarketplaceServiceHandler) GoOnline(context.Context, *connect.Request[v1alpha1.GoOnlineRequest]) (*connect.Response[v1alpha1.GoOnlineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.marketplace.v1alpha1.MarketplaceService.GoOnline is not implemented"))
}

func (UnimplementedMarketplaceServiceHandler) GoOffline(context.Context, *connect.Request[v1alpha1.GoOfflineRequest]) (*connect.Response[v1alpha1.GoOfflineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.marketplace.v1alpha1.MarketplaceService.GoOffline is not implemented"))
}

func (UnimplementedMarketplaceServiceHandler) GetStatus(context.Context, *connect.Request[v1alpha1.GetStatusRequest]) (*connect.Response[v1alpha1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.marketplace.v1alpha1.MarketplaceService.GetStatus is not implemented"))
}

func (UnimplementedMarketplaceServiceHandler) WatchStatus(context.Context, *connect.Request[v1alpha1.WatchStatusRequest], *connect.ServerStream[v1alpha1.WatchStatusResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ride.marketplace.v1alpha1.MarketplaceService.WatchStatus is not implemented"))
}

func (UnimplementedMarketplaceServiceHandler) GetLocation(context.Context, *connect.Request[v1alpha1.GetLocationRequest]) (*connect.Response[v1alpha1.GetLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.marketplace.v1alpha1.MarketplaceService.GetLocation is not implemented"))
}

func (UnimplementedMarketplaceServiceHandler) WatchLocation(context.Context, *connect.Request[v1alpha1.WatchLocationRequest], *connect.ServerStream[v1alpha1.WatchLocationResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ride.marketplace.v1alpha1.MarketplaceService.WatchLocation is not implemented"))
}

func (UnimplementedMarketplaceServiceHandler) UpdateLocation(context.Context, *connect.Request[v1alpha1.UpdateLocationRequest]) (*connect.Response[v1alpha1.UpdateLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.marketplace.v1alpha1.MarketplaceService.UpdateLocation is not implemented"))
}

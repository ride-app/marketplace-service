// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ride-app/marketplace-service/repositories/location (interfaces: LocationRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	marketplacev1alpha1 "github.com/ride-app/marketplace-service/api/gen/ride/marketplace/v1alpha1"
	logger "github.com/ride-app/marketplace-service/utils/logger"
	gomock "go.uber.org/mock/gomock"
)

// MockLocationRepository is a mock of LocationRepository interface.
type MockLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepositoryMockRecorder
}

// MockLocationRepositoryMockRecorder is the mock recorder for MockLocationRepository.
type MockLocationRepositoryMockRecorder struct {
	mock *MockLocationRepository
}

// NewMockLocationRepository creates a new mock instance.
func NewMockLocationRepository(ctrl *gomock.Controller) *MockLocationRepository {
	mock := &MockLocationRepository{ctrl: ctrl}
	mock.recorder = &MockLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepository) EXPECT() *MockLocationRepositoryMockRecorder {
	return m.recorder
}

// GetLocation mocks base method.
func (m *MockLocationRepository) GetLocation(arg0 context.Context, arg1 logger.Logger, arg2 string) (*marketplacev1alpha1.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*marketplacev1alpha1.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockLocationRepositoryMockRecorder) GetLocation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockLocationRepository)(nil).GetLocation), arg0, arg1, arg2)
}

// UpdateLocation mocks base method.
func (m *MockLocationRepository) UpdateLocation(arg0 context.Context, arg1 logger.Logger, arg2 string, arg3 *marketplacev1alpha1.Location) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockLocationRepositoryMockRecorder) UpdateLocation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockLocationRepository)(nil).UpdateLocation), arg0, arg1, arg2, arg3)
}

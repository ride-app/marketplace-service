// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ride-app/marketplace-service/internal/repositories/wallet (interfaces: WalletRepository)
//
// Generated by this command:
//
//	mockgen -destination ./mock/wallet_repository.go . WalletRepository
//

// Package mock_wallet is a generated GoMock package.
package mock_wallet

import (
	context "context"
	reflect "reflect"

	walletv1alpha1 "buf.build/gen/go/ride/wallet/protocolbuffers/go/ride/wallet/v1alpha1"
	logger "github.com/ride-app/go/pkg/logger"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// GetWallet mocks base method.
func (m *MockWalletRepository) GetWallet(arg0 context.Context, arg1 logger.Logger, arg2, arg3 string) (*walletv1alpha1.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*walletv1alpha1.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletRepositoryMockRecorder) GetWallet(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletRepository)(nil).GetWallet), arg0, arg1, arg2, arg3)
}
